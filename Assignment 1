{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO+M4Gm9luRj5jEwQuk+AXL",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Armaanml/-Armaan-tech-creator/blob/main/Untitled2.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jMS-u9XD-FS2",
        "outputId": "6844d308-c41d-4830-e9fa-d636caf3ca2f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[11, 12, 13, 14, 50, 60]\n"
          ]
        }
      ],
      "source": [
        "L = [11, 12, 13, 14]\n",
        "L.append(50)\n",
        "L.append(60)\n",
        "print(L)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [11, 12, 13, 14, 50, 60]\n",
        "L.remove(11)\n",
        "L.remove(13)\n",
        "print(L)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mTyqw4-J-N1I",
        "outputId": "92cdcb2a-f6d4-4df4-fe7d-6ee9e2d65d4d"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[12, 14, 50, 60]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [12, 14, 50, 60]\n",
        "L.sort()\n",
        "print(L)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SOrYLr1A-NzR",
        "outputId": "6ac79b10-4b1f-4f17-aa87-cc7f564b3f53"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[12, 14, 50, 60]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [12, 14, 50, 60]\n",
        "L.sort(reverse=True)\n",
        "print(L)\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zMdsnyBE-NxA",
        "outputId": "263612cf-400c-4b88-8fc3-71f2b987cdfb"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[60, 50, 14, 12]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [12, 14, 50, 60]\n",
        "found = 13 in L\n",
        "print(found)\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zncBtBaE-Nup",
        "outputId": "f6f3d8a6-2cdd-4323-f30d-9e205dd5db65"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [12, 14, 50, 60]\n",
        "count = len(L)\n",
        "print(count)\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FMiFa0ac-rZ6",
        "outputId": "ae9f8a49-15a7-49f8-953f-880fa4a1623a"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [12, 14, 50, 60]\n",
        "total_sum = sum(L)\n",
        "print(total_sum)\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hPOXkqc4-rXr",
        "outputId": "03f8e287-dfbf-4ca1-98f8-fce140047091"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "136\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [12, 14, 50, 60]\n",
        "odd_sum = sum(x for x in L if x % 2 != 0)\n",
        "print(odd_sum)\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M-pOcS2y-rVe",
        "outputId": "80953270-5f37-4d93-c27b-d0b33f6205ba"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [12, 14, 50, 60]\n",
        "even_sum = sum(x for x in L if x % 2 == 0)\n",
        "print(even_sum)\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9zCUch2h-rTl",
        "outputId": "ea6fd376-1736-4072-b7b4-2f3b380ebe62"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "136\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [12, 14, 50, 60]\n",
        "\n",
        "def is_prime(n):\n",
        "    if n <= 1:\n",
        "        return False\n",
        "    for i in range(2, int(n ** 0.5) + 1):\n",
        "        if n % i == 0:\n",
        "            return False\n",
        "    return True\n",
        "\n",
        "prime_sum = sum(x for x in L if is_prime(x))\n",
        "print(prime_sum)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "huP8T5V_-rQ0",
        "outputId": "c4df55fb-5cdc-434e-b822-6fe8a0e52a39"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [12, 14, 50, 60]\n",
        "L.clear()\n",
        "print(L)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GoGc-rAU-rOM",
        "outputId": "419c74ad-c743-488a-d4a3-61a2badc2903"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [12, 14, 50, 60]\n",
        "del L"
      ],
      "metadata": {
        "id": "8g2faaKX-rGT"
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "D = {1: 5.6, 2: 7.8, 3: 6.6, 4: 8.7, 5: 7.7}\n",
        "\n",
        "D[8] = 8.8\n",
        "print(\"(i)\", D)\n",
        "\n",
        "D.pop(2)\n",
        "print(\"(ii)\", D)\n",
        "\n",
        "print(\"(iii)\", 6 in D)\n",
        "\n",
        "print(\"(iv)\", len(D))\n",
        "\n",
        "\n",
        "print(\"(v)\", sum(D.values()))\n",
        "\n",
        "\n",
        "D[3] = 7.1\n",
        "print(\"(vi)\", D)\n",
        "\n",
        "D.clear()\n",
        "print(\"(vii)\", D)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zL3d73Hk-rDA",
        "outputId": "1c476011-4600-4348-c43d-065977af6339"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(i) {1: 5.6, 2: 7.8, 3: 6.6, 4: 8.7, 5: 7.7, 8: 8.8}\n",
            "(ii) {1: 5.6, 3: 6.6, 4: 8.7, 5: 7.7, 8: 8.8}\n",
            "(iii) False\n",
            "(iv) 5\n",
            "(v) 37.4\n",
            "(vi) {1: 5.6, 3: 7.1, 4: 8.7, 5: 7.7, 8: 8.8}\n",
            "(vii) {}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "S1 = {10, 20, 30, 40, 50, 60}\n",
        "S2 = {40, 50, 60, 70, 80, 90}\n",
        "\n",
        "S1.add(55)\n",
        "S1.add(66)\n",
        "print(\"(i)\", S1)\n",
        "\n",
        "S1.discard(10)\n",
        "S1.discard(30)\n",
        "print(\"(ii)\", S1)\n",
        "\n",
        "print(\"(iii)\", 40 in S1)\n",
        "\n",
        "\n",
        "print(\"(iv)\", S1.union(S2))\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6pL4zJPx-q-a",
        "outputId": "6cf0bfdc-e8a4-4d19-d292-61a0467bc7b4"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(i) {50, 66, 20, 55, 40, 10, 60, 30}\n",
            "(ii) {50, 66, 20, 55, 40, 60}\n",
            "(iii) True\n",
            "(iv) {66, 70, 40, 80, 50, 20, 55, 90, 60}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "import string\n",
        "\n",
        "print(\"100 Random Strings (length 6 to 8):\")\n",
        "for _ in range(100):\n",
        "    length = random.randint(6, 8)\n",
        "    rand_str = ''.join(random.choices(string.ascii_letters, k=length))\n",
        "    print(rand_str)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BleXVrqt-q8E",
        "outputId": "f339bfdd-81bf-4c1a-dc19-12da940479ce"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100 Random Strings (length 6 to 8):\n",
            "QgMrFHes\n",
            "vKxDqc\n",
            "GglhaGNg\n",
            "RBCUroei\n",
            "HaCXxsk\n",
            "QyCVXBWg\n",
            "ubHoiBj\n",
            "HnKghTxK\n",
            "fLOclE\n",
            "EovPHIF\n",
            "RmSNiOZz\n",
            "VrIqAH\n",
            "MjaGCR\n",
            "JaieYVn\n",
            "FivRvec\n",
            "GBBxeN\n",
            "VANLAX\n",
            "hhVhvHP\n",
            "DfIIHAGs\n",
            "zneBdxV\n",
            "EfaoIOh\n",
            "gxLzEI\n",
            "bxMwUO\n",
            "KkhDXt\n",
            "HIdiEyc\n",
            "kMdtOS\n",
            "npeyRe\n",
            "wRwgdbDn\n",
            "vSXApshx\n",
            "nSPmqk\n",
            "IQGFLzR\n",
            "IfScMwE\n",
            "BtcNBh\n",
            "DnznetlF\n",
            "kstBUZhy\n",
            "mQQTVmd\n",
            "qJSAYVKk\n",
            "DSHIXrxm\n",
            "tladzE\n",
            "ShVzZl\n",
            "SQBmSCv\n",
            "UJlqPwGB\n",
            "Xppgha\n",
            "UpukbOM\n",
            "PFMxdJ\n",
            "fDqkWbxB\n",
            "fFcldYCz\n",
            "uxpTKUf\n",
            "hFkkFpt\n",
            "puzYxiDs\n",
            "ecAJNZMJ\n",
            "qHFtfDs\n",
            "BFxNaW\n",
            "NSSAOWb\n",
            "OyPaoTd\n",
            "vlTPSqJ\n",
            "fucbwM\n",
            "UlEvtQ\n",
            "cbTmYJVN\n",
            "VLebQu\n",
            "MRwyevI\n",
            "frGXslF\n",
            "pQgYRGK\n",
            "mUKawIIb\n",
            "iwpHVDHH\n",
            "yZkXWVqW\n",
            "aSQEovw\n",
            "GWfiDQO\n",
            "TucXNE\n",
            "sREzcI\n",
            "azndrX\n",
            "HrKExmQ\n",
            "OncfBKv\n",
            "okFCkM\n",
            "HGAExx\n",
            "JPOGVgC\n",
            "XrJQKlG\n",
            "mGreQTXj\n",
            "pqmHuY\n",
            "DhWOOUto\n",
            "CClgNvP\n",
            "JEVdyTbE\n",
            "vSIMhZEX\n",
            "nfhcEf\n",
            "TbdTQG\n",
            "Xturka\n",
            "AJcHLS\n",
            "lghJdpqc\n",
            "CxfWBqHc\n",
            "UfHJURr\n",
            "qQChTU\n",
            "teTtBloZ\n",
            "cvfxobU\n",
            "qeWkoPH\n",
            "ZvfIFt\n",
            "CQZqtD\n",
            "zKczddxh\n",
            "TxJOQLcw\n",
            "hPRZflZ\n",
            "qKjuAJ\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def is_prime(n):\n",
        "    if n < 2:\n",
        "        return False\n",
        "    for i in range(2, int(n**0.5)+1):\n",
        "        if n % i == 0:\n",
        "            return False\n",
        "    return True\n",
        "\n",
        "print(\"Prime numbers between 600 and 800:\")\n",
        "for num in range(600, 801):\n",
        "    if is_prime(num):\n",
        "        print(num, end=\" \")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n1A35LR--q3O",
        "outputId": "9b308ddf-3eab-4df4-9e82-9a91786c978b"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Prime numbers between 600 and 800:\n",
            "601 607 613 617 619 631 641 643 647 653 659 661 673 677 683 691 701 709 719 727 733 739 743 751 757 761 769 773 787 797 "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\nNumbers divisible by both 7 and 9 between 100 and 1000:\")\n",
        "for num in range(100, 1001):\n",
        "    if num % 7 == 0 and num % 9 == 0:\n",
        "        print(num, end=\" \")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RbRpdFvF-q04",
        "outputId": "144b5c2d-3491-45ff-d47e-30ee3eb93b20"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Numbers divisible by both 7 and 9 between 100 and 1000:\n",
            "126 189 252 315 378 441 504 567 630 693 756 819 882 945 "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "# Create lists\n",
        "list1 = random.sample(range(10, 31), 10)\n",
        "list2 = random.sample(range(10, 31), 10)\n",
        "\n",
        "print(\"List 1:\", list1)\n",
        "print(\"List 2:\", list2)\n",
        "\n",
        "# (i) Common numbers\n",
        "common = list(set(list1) & set(list2))\n",
        "print(\"Common numbers:\", common)\n",
        "\n",
        "# (ii) Unique numbers in both lists\n",
        "unique = list(set(list1) ^ set(list2))\n",
        "print(\"Unique numbers:\", unique)\n",
        "\n",
        "# (iii) Minimum in both lists\n",
        "print(\"Minimum in List 1:\", min(list1))\n",
        "print(\"Minimum in List 2:\", min(list2))\n",
        "\n",
        "# (iv) Maximum in both lists\n",
        "print(\"Maximum in List 1:\", max(list1))\n",
        "print(\"Maximum in List 2:\", max(list2))\n",
        "\n",
        "# (v) Sum of both lists\n",
        "print(\"Sum of List 1:\", sum(list1))\n",
        "print(\"Sum of List 2:\", sum(list2))\n",
        "print(\"Total Sum:\", sum(list1) + sum(list2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "54fZXVa_-qyd",
        "outputId": "cd5dfb34-d3c8-468d-e8ae-35a3f8cb8e4b"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "List 1: [11, 14, 24, 15, 21, 20, 30, 12, 22, 16]\n",
            "List 2: [26, 15, 17, 11, 13, 10, 19, 23, 30, 12]\n",
            "Common numbers: [11, 12, 30, 15]\n",
            "Unique numbers: [10, 13, 14, 16, 17, 19, 20, 21, 22, 23, 24, 26]\n",
            "Minimum in List 1: 11\n",
            "Minimum in List 2: 10\n",
            "Maximum in List 1: 30\n",
            "Maximum in List 2: 30\n",
            "Sum of List 1: 185\n",
            "Sum of List 2: 176\n",
            "Total Sum: 361\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "\n",
        "L = [random.randint(100, 900) for _ in range(100)]\n",
        "print(\"Random Numbers List:\", L)\n",
        "\n",
        "# (i) Count all odd numbers\n",
        "odd_numbers = [x for x in L if x % 2 != 0]\n",
        "print(\"Odd numbers:\", odd_numbers)\n",
        "print(\"Count of odd numbers:\", len(odd_numbers))\n",
        "\n",
        "# (ii) Count all even numbers\n",
        "even_numbers = [x for x in L if x % 2 == 0]\n",
        "print(\"Even numbers:\", even_numbers)\n",
        "print(\"Count of even numbers:\", len(even_numbers))\n",
        "\n",
        "# (iii) Count all prime numbers\n",
        "def is_prime(n):\n",
        "    if n < 2:\n",
        "        return False\n",
        "    for i in range(2, int(n**0.5) + 1):\n",
        "        if n % i == 0:\n",
        "            return False\n",
        "    return True\n",
        "\n",
        "prime_numbers = [x for x in L if is_prime(x)]\n",
        "print(\"Prime numbers:\", prime_numbers)\n",
        "print(\"Count of prime numbers:\", len(prime_numbers))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a6FOHPn8DDgb",
        "outputId": "de9c8ab4-bd41-4642-a12a-78ef48b3c1bc"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random Numbers List: [726, 643, 509, 104, 552, 178, 125, 302, 283, 811, 234, 472, 761, 465, 785, 390, 452, 352, 727, 445, 421, 549, 199, 706, 211, 122, 729, 159, 681, 258, 459, 141, 587, 657, 838, 198, 367, 886, 654, 541, 159, 594, 152, 211, 751, 550, 152, 811, 717, 100, 540, 239, 662, 851, 137, 722, 371, 375, 819, 293, 570, 558, 222, 628, 277, 208, 532, 340, 357, 731, 547, 438, 403, 466, 197, 524, 382, 484, 350, 100, 591, 169, 125, 268, 756, 174, 532, 446, 440, 814, 860, 724, 775, 118, 448, 207, 439, 484, 751, 317]\n",
            "Odd numbers: [643, 509, 125, 283, 811, 761, 465, 785, 727, 445, 421, 549, 199, 211, 729, 159, 681, 459, 141, 587, 657, 367, 541, 159, 211, 751, 811, 717, 239, 851, 137, 371, 375, 819, 293, 277, 357, 731, 547, 403, 197, 591, 169, 125, 775, 207, 439, 751, 317]\n",
            "Count of odd numbers: 49\n",
            "Even numbers: [726, 104, 552, 178, 302, 234, 472, 390, 452, 352, 706, 122, 258, 838, 198, 886, 654, 594, 152, 550, 152, 100, 540, 662, 722, 570, 558, 222, 628, 208, 532, 340, 438, 466, 524, 382, 484, 350, 100, 268, 756, 174, 532, 446, 440, 814, 860, 724, 118, 448, 484]\n",
            "Count of even numbers: 51\n",
            "Prime numbers: [643, 509, 283, 811, 761, 727, 421, 199, 211, 587, 367, 541, 211, 751, 811, 239, 137, 293, 277, 547, 197, 439, 751, 317]\n",
            "Count of prime numbers: 24\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "D = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\"}\n",
        "\n",
        "# Write keys and values to file\n",
        "with open(\"dictionary_output.txt\", \"w\") as f:\n",
        "    for key, value in D.items():\n",
        "        f.write(f\"{key}, {value}\\n\")\n",
        "\n",
        "print(\"Dictionary written to 'dictionary_output.txt'\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P3ybpIUrDDdj",
        "outputId": "0186e700-dfbd-4a22-c940-2f9c1c5d5f3a"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dictionary written to 'dictionary_output.txt'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"]\n",
        "\n",
        "# Open file for writing\n",
        "with open(\"lengths.txt\", \"w\") as f:\n",
        "    for item in L:\n",
        "        f.write(f\"{item}, {len(item)}\\n\")\n",
        "\n",
        "# To show output\n",
        "with open(\"lengths.txt\", \"r\") as f:\n",
        "    print(f.read())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g2iaw6QYDDaR",
        "outputId": "c2b96265-9505-46b3-af12-b4073a0fc30a"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "One, 3\n",
            "Two, 3\n",
            "Three, 5\n",
            "Four, 4\n",
            "Five, 4\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "import string\n",
        "\n",
        "\n",
        "def generate_random_string(length):\n",
        "    return ''.join(random.choices(string.ascii_letters, k=length))\n",
        "\n",
        "\n",
        "with open(\"random_strings.txt\", \"w\") as f:\n",
        "    for _ in range(100):\n",
        "        length = random.randint(10, 15)\n",
        "        rand_str = generate_random_string(length)\n",
        "        f.write(rand_str + \"\\n\")\n",
        "\n",
        "with open(\"random_strings.txt\", \"r\") as f:\n",
        "    for i in range(5):  # Print first 5 random strings\n",
        "        print(f.readline().strip())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6QYu3O3kDXrv",
        "outputId": "4e669d93-8f6d-4e79-df0a-386f30c8332e"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "isvKIrCSrMnDWN\n",
            "xeiLjwCPVbbqd\n",
            "hsSrAqckazsi\n",
            "hxGPMmkmTXpLFZ\n",
            "yDNlwHvCXHpKc\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to check prime number\n",
        "def is_prime(n):\n",
        "    if n < 2:\n",
        "        return False\n",
        "    for i in range(2, int(n**0.5)+1):\n",
        "        if n % i == 0:\n",
        "            return False\n",
        "    return True\n",
        "\n",
        "# Generate and write prime numbers to file\n",
        "with open(\"prime_600_to_800.txt\", \"w\") as file:\n",
        "    for num in range(600, 801):\n",
        "        if is_prime(num):\n",
        "            file.write(str(num) + \"\\n\")\n",
        "\n",
        "print(\" Prime numbers between 600 and 800 have been written to 'prime_600_to_800.txt'\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zg-Ty8-DDXkJ",
        "outputId": "7ea6cbf0-63e6-4704-a19a-76b9eae3e563"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " Prime numbers between 600 and 800 have been written to 'prime_600_to_800.txt'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import time\n",
        "\n",
        "start_time = time.time()\n",
        "\n",
        "total = sum(range(1, 1000001))\n",
        "\n",
        "end_time = time.time()\n",
        "\n",
        "time_taken = end_time - start_time\n",
        "print(\" Time taken by the program: {:.6f} seconds\".format(time_taken))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gcnV2jggDl4W",
        "outputId": "157c19cd-12ba-4577-da7e-a36f0401a4f3"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " Time taken by the program: 0.019813 seconds\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "import time\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "sizes = [5000, 10000, 15000, 20000, 25000]\n",
        "times = []\n",
        "\n",
        "for size in sizes:\n",
        "    L = [random.randint(1, 100000) for _ in range(size)]\n",
        "\n",
        "    start = time.time()\n",
        "    L.sort()\n",
        "    end = time.time()\n",
        "\n",
        "    t_taken = end - start\n",
        "    times.append(t_taken)\n",
        "    print(f\"Sorted {size} elements in {t_taken:.6f} seconds\")\n",
        "\n",
        "plt.plot(sizes, times, marker='o')\n",
        "plt.xlabel(\"Number of elements in list\")\n",
        "plt.ylabel(\"Time Taken (seconds)\")\n",
        "plt.title(\"Sorting Time vs Number of Elements\")\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 559
        },
        "id": "kpUOjF8DDlze",
        "outputId": "46f11b08-81c9-4bc6-b26d-535d3c79af91"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sorted 5000 elements in 0.001004 seconds\n",
            "Sorted 10000 elements in 0.001716 seconds\n",
            "Sorted 15000 elements in 0.003077 seconds\n",
            "Sorted 20000 elements in 0.004506 seconds\n",
            "Sorted 25000 elements in 0.005575 seconds\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "students = {\n",
        "    \"Alice\": [78, 85, 90, 82, 88],\n",
        "    \"Bob\": [60, 65, 58, 62, 64],\n",
        "    \"Charlie\": [90, 92, 88, 94, 89]\n",
        "}\n",
        "\n",
        "averages = {name: sum(marks)/len(marks) for name, marks in students.items()}\n",
        "\n",
        "max_student = max(averages, key=averages.get)\n",
        "min_student = min(averages, key=averages.get)\n",
        "\n",
        "print(\"Average marks of students:\")\n",
        "for name, avg in averages.items():\n",
        "    print(f\"{name}: {avg:.2f}\")\n",
        "\n",
        "print(f\"\\nStudent with maximum average: {max_student} ({averages[max_student]:.2f})\")\n",
        "print(f\"Student with minimum average: {min_student} ({averages[min_student]:.2f})\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dSu6eISxDlwC",
        "outputId": "91caa9ce-35db-4a4a-db4c-ac3488380a84"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average marks of students:\n",
            "Alice: 84.60\n",
            "Bob: 61.80\n",
            "Charlie: 90.60\n",
            "\n",
            "Student with maximum average: Charlie (90.60)\n",
            "Student with minimum average: Bob (61.80)\n"
          ]
        }
      ]
    }
  ]
}
